package database

func (db *appdbimpl) banUser(authUsername string, bannedUsername string) error {
	res, err := db.c.Exec(`INSERT INTO bans (authUsername, bannedUsername) VALUES (?, ?)`,
		authUsername, bannedUsername)
	if err != nil {
		return nil, err
	}

	return nil
}

var ErrBanDoesNotExist = errors.New("The ban does not exist!")
func (db *appdbimpl) banUser(authUsername string, bannedUsername string) error {
	res, err := db.c.Exec(`DELETE FROM bans WHERE authUsername=? AND bannedUsername=?`, 
		authUsername, bannedUsername)
	if err != nil {
		return err
	}

	affected, err := res.RowsAffected()
	if err != nil {
		return err
	} else if affected == 0 {
		// If we didn't delete any row, then the ban didn't exist
		return ErrBanDoesNotExist
	}
	return nil
}

func (db *appdbimpl) listBans(authUsername string) ([]string, error) {
	var ret []string

	// Plain simple SELECT
	rows, err := db.c.Query(`SELECT bannedUsername FROM bans WHERE authUsername=?`, 
		authUsername)
	if err != nil {
		return nil, err
	}
	defer func() { _ = rows.Close() }()

	// Here we read the resultset and we build the list to be returned
	for rows.Next() {
		var b ban
		err = rows.Scan(&b.username)
		if err != nil {
			return nil, err
		}

		ret = append(ret, b)
	}
	if err = rows.Err(); err != nil {
		return nil, err
	}

	return ret, nil
}
