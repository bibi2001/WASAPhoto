openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moment, 
    thanks to WASAPhoto! You can upload your photos directly from your 
    PC, and they will be visible to everyone following you.
  version: 1.0.0


tags:
  - name: login
  - name: stream
  - name: photos
  - name: comments
  - name: likes
  - name: users
  - name: bans
  - name: follows
  
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: Valid username
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    description: User identifier
                    type: integer
                    example: 1
  /home:
    get:
      tags: ["stream"]
      summary: Authenticated user's feed
      description: Show the authenticated user's feed in reverse chronological order.
      operationId: getMyStream
      responses:
        '200':
          description: Feed sucessfuly shown.
          content:
            application/json:
                schema:
                  description: Array of photos posted by the people that the user follows.
                  type: array
                  items:
                    $ref: '#/components/schemas/Photo'
                  minItems: 0
                  maxItems: 30  
      security:
      - bearerAuth: []

  /users/search:
    get:
      tags: ["users"]
      summary: Search users
      description: Search for users that match the query.
      operationId: searchUsers
      parameters:
        - name: q
          in: query
          schema:
            description: Username that the user wants to find.
            type: string
            example: Maria
            pattern: 'ˆ.*?$'
            minLength: 0
            maxLength: 16
          description: Search query.
          required: true
      responses:
        '200':
          description: Successfully show list of users
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid query supplied
        '404':
          description: Users not found
      security:
      - bearerAuth: []
    
  /users/{username}:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["users"]
      summary: User's profile
      description: |-
        Show the user's profile, that contains:
        the user’s photos (in reverse chronological order), how many photos have 
        been uploaded, the user's username, followers and following.
      operationId: getUserProfile
      responses:
        '200':
          description: Sucessfuly show user profile
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid parameters supplied
        '404':
          description: User not found
      security:
      - bearerAuth: []

  /users/{username}/username:
    parameters:
      - $ref: "#/components/parameters/username"
    put:
      tags: ["users"]
      summary: Update username
      description: Updating authenticated user's username
      operationId: setMyUserName
      requestBody:
        description: |-
          New username that the user wishes to have.
          This username has to be different than the old one.
          Only the owner of the profile can change their profile.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200': 
          description: Sucessfully changed username
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: User not found
      security:
      - bearerAuth: []

  /users/{username}/following:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["follows"]
      summary: Get following list
      description: Get a list of users who the user with the given username follows
      operationId: listFollowing
      responses:
        '200':
          description: Successfully list following
          content:
            application/json:
              schema:
                description: List of users that the user follows
                type: array
                items:
                  $ref: '#/components/schemas/Username'
                minItems: 0
                maxItems: 200 
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: []

  /users/{username}/followers:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["follows"]
      summary: Get followers list
      description: Get a list of users who follow the user with the given username
      operationId: listFollowers
      responses:
        '200':
          description: Successfully list followers
          content:
            application/json:
              schema:
                description: List of users who follow the user
                type: array
                items:
                  $ref: '#/components/schemas/Username'
                minItems: 0
                maxItems: 200
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: []
  /users/{username}/followers/{authUser}:
    parameters:
      - $ref: "#/components/parameters/username"
      - name: authUser
        in: path
        schema:
          description: Valid username
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        description: The username of the user to ban or unban
        required: true
    put:
      tags: ["follows"]
      summary: Follow a user
      description: |-
        Follow the user with the specified username. 
        The authenticated user will follow the user with the given username.
        A user can't follow themselves
      operationId: followUser
      responses:
        '201': 
          description: Sucessfully followed user
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: User not found
      security:
      - bearerAuth: []
    delete:
      tags: ["follows"]
      summary: Unfollow a user
      description: |-
        Unfollow the user with the specified username. 
        The authenticated user will unfollow the user with the given username.
        A user can't unfollow themselves
      operationId: unfollowUser
      responses:
        '204': 
          description: Sucessfully unfollowed user
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: User not found
      security:
      - bearerAuth: []
  
  /users/{username}/bans:
    parameters:
      - $ref: "#/components/parameters/username"
    get:
      tags: ["bans"]
      summary: List user bans
      description: List all the bans made by the authenticated user
      operationId: listBans
      responses:
        '200':
          description: Sucessfully list bans
          content:
            application/json:
              schema:
                description: List of users banned by authenticated user
                type: array
                items: 
                  $ref: '#/components/schemas/Username'
                minItems: 0
                maxItems: 200
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404':
          description: User not found
      security:
      - bearerAuth: [] 

  /users/{username}/bans/{bannedUser}:
    parameters:
      - $ref: "#/components/parameters/username"
      - name: bannedUser
        in: path
        schema:
          description: Valid username
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        description: The username of the user to ban or unban
        required: true
    put:
      tags: ["bans"]
      summary: Ban a user
      description: |-
        Ban the user with the specified username. 
        The authenticated user will ban the user with the given username.
        A user can't ban themselves
      operationId: banUser
      responses:
        '201': 
          description: Sucessfully banned user
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: User not found
      security:
      - bearerAuth: []
    delete:
      tags: ["bans"]
      summary: Unban a user
      description: |-
        Unban the user with the specified username. 
        The authenticated user will unban the user with the given username.
        A user can't unban themselves
      operationId: unbanUser
      responses:
        '204': 
          description: Sucessfully unbanned user
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: User not found
      security:
      - bearerAuth: []

  /photo:
    post:
      tags: ["photos"]
      summary: Upload photo
      description: Upload a new photo by the authenticated user
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Image and caption to upload as a new post
              type: object
              properties:
                image:
                  description: image in binary format
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 32505856
                caption:
                  description: caption of the photo
                  type: string
                  minLength: 1
                  maxLength: 90
                  example: "sunny day at the beach"
      responses:
        '201':
          description: Photo sucessfuly uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Invalid request body supplied
      security:
      - bearerAuth: []
  /photo/{photoId}:  
    parameters:
      - $ref: "#/components/parameters/photoId"
    delete:
      tags: ["photos"]
      summary: Delete photo with the given Id
      description: |-
        Delete a photo that was posted by the authenticated user
        This action is only available for the author
      operationId: deletePhoto
      responses:
        '204': 
          description: Photo sucessfuly delete
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 
    get:
      tags: ["photos"]
      summary: Get a photo
      description: Get the photo with the given Id
      operationId: getPhoto
      responses:
        '200':
          description: Sucessfully showed photo 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
          
  /photo/{photoId}/comments:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      tags: ["comments"]
      summary: List all comments in photo with the given Id
      description: List all the comments in a photo
      operationId: listComments
      responses:
        '200':
          description: Sucessfully list comments
          content:
            application/json:
              schema: 
                description: List of comments on the photo
                type: array
                items: {$ref: '#/components/schemas/Comment'}
                minItems: 0
                maxItems: 30
        '400':
          description: Invalid parameters supplied
        '404':
          description: Photo not found
      security:
      - bearerAuth: [] 
    post:
      tags: ["comments"]
      summary: Add a comment to a photo
      description: Add a comment to a photo given the id of the photo
      operationId: commentPhoto
      requestBody:
        description: Add a comment to an existing photo
        content:
          application/json:
            schema:
              description: Text of the comment
              type: string
              example: 'what a cool photo'
              minLength: 1
              maxLength: 30
              pattern: '.*'
        required: true
      responses:
        '201':
          description: Sucessfully uploaded comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid parameters or request body supplied
        '404':
          description: Photo not found
      security:
      - bearerAuth: []

  /photo/{photoId}/comments/{commentId}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - name: commentId
        in: path
        schema:
          description: Identifier of the comment
          type: integer
          example: 1
        description: the id of the comment
        required: true
    delete: 
      tags: ["comments"]
      summary: Uncomment a photo
      description: |-
        Delete a comment that was posted by the authenticated user
        This action is only available for the author
      operationId: uncommentPhoto
      
      responses:
        '204':
          description: Comment sucessfuly deleted
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404':
          description: Comment or Photo not found
      security:
      - bearerAuth: [] 
      
  /photo/{photoId}/likes:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      tags: ["likes"]
      summary: get a list of users who liked the photo with the id
      description: get a list of users who liked the photo with the id
      operationId: listLikes
      responses:
        '200':
          description: Successfully list photo likes
          content:
            application/json:
              schema:
                description: List of users who liked the photo
                type: array
                items:
                  $ref: '#/components/schemas/Username'
                  minItems: 0
                  maxItems: 200
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: []
  /photo/{photoId}/likes/{username}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/username"
    put:
      tags: ["likes"]
      summary: like the photo with the id
      description: like the photo with the id with the authenticated user
      operationId: likePhoto
      responses:
        '201':
          description: Sucessfuly liked photo
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 
    delete:
      tags: ["likes"]
      summary: unlike the photo with the id
      description: remove the aunthenticated user's like from the photo with the id
      operationId: unlikePhoto
      responses:
        '204':
          description: Sucessfuly unliked photo
        '400':
          description: Invalid parameters supplied
        '403':
          description: Forbidden action
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 


components:
  schemas:
    Username:
      description: Valid username
      type: string
      example: Maria
      pattern: 'ˆ.*?$'
      minLength: 3
      maxLength: 16
    UserList:
      description: List of usernames
      type: object
      properties:
        nElements:
          description: Number of elements of the list
          type: integer
          minimum: 0
        users:
          description: List of usernames
          type: array
          minItems: 1
          maxItems: 200
          items: 
            type: string
            example: Maria
            pattern: 'ˆ.*?$'
            minLength: 3
            maxLength: 16     
    UserProfile:
      description: Profile of a user
      type: object
      properties:
        username:
          description: Username of user
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        numberPosts:
          description: Number of posts
          type: integer
          example: 3
        followers:
          description: Number of followers
          type: integer
          example: 3
        following:
          description: Number of users followed
          type: integer
          example: 3
        isFollowed:
          description: Is the user followed by the authenticated user
          type: boolean
          default: false
        isBanned:
          description: Is the user banned by the authenticated user
          type: boolean
          default: false
        photos:
          description: Photos uploaded by the user
          type: array
          items: {$ref: '#/components/schemas/Photo'}
    Photo:
      description: Photo uploaded by a user
      type: object
      properties:
        photoId:
          description: Identifier 
          type: integer
          format: int 64
          example: 10
        image:
          description: Image in binary format
          type: string
          format: binary
          minLength: 1
          maxLength: 32505856 
        username:
          description: Username of the owner
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        nComments:
          description: Number of comments on the photo
          type: integer
          format: int 64
          default: 0
        likes:
          description: Number of likes on the photo
          type: integer
          format: int 64
          default: 0
        isLiked:
          description: Is the photo liked by the authenticated user
          type: boolean
          default: false
        date:
          description: Upload date
          type: string
          format: date-time
        caption:
          description: Caption of the photo
          type: string
          minLength: 1
          maxLength: 90
          pattern: '.*'
          example: "sunny day at the beach"
    Comment:
      description: Comment uploaded on a photo
      type: object
      properties:
        text:
          description: Text of the comment
          type: string
          example: 'what a cool photo'
          minLength: 1
          maxLength: 30
          pattern: '.*'
        username:
          description: Username of the owner of the comment
          type: string
          example: Maria
          pattern: 'ˆ.*?$'
          minLength: 3
          maxLength: 16
        photo:
          $ref: '#/components/schemas/Photo'
          
  parameters:
    username:
      schema:
        description: Valid username
        type: string
        example: Maria
        pattern: 'ˆ.*?$'
        minLength: 3
        maxLength: 16
      name: username
      in: path
      description: The name that needs to be fetched
      required: true
    photoId:
      schema:
        description: Identifier of the photo
        type: integer
        example: 1
      name: photoId
      in: path
      required: true
      description: Photo Id
    
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer