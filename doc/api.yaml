openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moment, 
    thanks to WASAPhoto! You can upload your photos directly from your 
    PC, and they will be visible to everyone following you.
  version: 1.0.0


tags:
  - name: login
  - name: stream
  - name: photos
  - name: comments
  - name: likes
  - name: users
  - name: bans
  - name: follows
  
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /home:
    get:
      tags: ["stream"]
      summary: Authenticated user's feed
      description: Show the authenticated user's feed in reverse chronological order
      operationId: getMyStream
      responses:
        '200':
          description: Feed sucessfuly shown
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Photo'
      security:
      - bearerAuth: []

  /users/search:
    get:
      tags: ["users"]
      summary: Search users
      description: Search for users that match the query
      operationId: searchUsers
      parameters:
        - name: q
          in: query
          schema:
            type: string
            example: jonhDoe
          description: search query
          required: true
      responses:
        '200':
          description: Successfully show list of users
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid query supplied
        '404':
          description: Users not found
      security:
      - bearerAuth: []
    
  /user/{username}:
    get:
      tags: ["users"]
      summary: User's profile
      description: |-
        Show the user's profile, that contains:
        the user’s photos (in reverse chronological order), how many photos have 
        been uploaded, the user's username, followers and following.
      operationId: getUserProfile
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        '200':
          description: Sucessfuly show user profile
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid parameters supplied
        '404':
          description: User not found
      security:
      - bearerAuth: []
  /user/{username}/username:
    put:
      tags: ["users"]
      summary: Update username
      description: Updating authenticated user's username
      operationId: setMyUserName
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: Username
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        '200': 
          description: Sucessfully changed username
        '400':
          description: Invalid parameters supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []
  /users/{username}/followers/{authUser}:
    parameters:
      - $ref: "#/components/parameters/username"
      - name: authUser
        in: path
        schema:
          type: string
        description: The username of the user to ban or unban
        required: true
    put:
      tags: ["follows"]
      summary: Follow a user
      description: |-
        Follow the user with the specified username. 
        The authenticated user will follow the user with the given username.
        A user can't follow themselves
      operationId: followUser
      responses:
        '201': 
          description: Sucessfully followed user
        '400':
          description: Invalid parameters supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []
    delete:
      tags: ["follows"]
      summary: Unfollow a user
      description: |-
        Unfollow the user with the specified username. 
        The authenticated user will unfollow the user with the given username.
        A user can't unfollow themselves
      operationId: unfollowUser
      responses:
        '204': 
          description: Sucessfully unfollowed user
        '400':
          description: Invalid parameters supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []
      
  /users/{username}/bans/{bannedUser}:
    parameters:
      - $ref: "#/components/parameters/username"
      - name: bannedUser
        in: path
        schema:
          type: string
        description: The username of the user to ban or unban
        required: true
    put:
      tags: ["bans"]
      summary: Ban a user
      description: |-
        Ban the user with the specified username. 
        The authenticated user will ban the user with the given username.
        A user can't unfollow themselves
      operationId: banUser
      responses:
        '201': 
          description: Sucessfully banned user
        '400':
          description: Invalid parameters supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []
    delete:
      tags: ["bans"]
      summary: Unban a user
      description: |-
        Unban the user with the specified username. 
        The authenticated user will unban the user with the given username.
        A user can't unfollow themselves
      operationId: unbanUser
      responses:
        '204': 
          description: Sucessfully unbanned user
        '400':
          description: Invalid parameters supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []

  /photo:
    post:
      tags: ["photos"]
      summary: Upload photo
      description: Upload a new photo by the authenticated user
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 32505856
                caption:
                  type: string
                  minLength: 1
                  maxLength: 90
                  example: "sunny day at the beach"
      responses:
        '201':
          description: Photo sucessfuly uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Invalid request body supplied
      security:
      - bearerAuth: []
  /photo/{photoId}:  
    parameters:
      - $ref: "#/components/parameters/photoId"
    delete:
      tags: ["photos"]
      summary: Delete photo with the given Id
      description: Delete a photo that was posted by the authenticated user
      operationId: deletePhoto
      responses:
        '204': 
          description: Photo sucessfuly delete
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 
    get:
      tags: ["photos"]
      summary: Get a photo
      description: Get the photo with the given Id
      operationId: getPhoto
      responses:
        '200':
          description: Sucessfully showed photo 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
          
  /photo/{photoId}/comments:
    get:
      tags: ["comments"]
      summary: List all comments in photo with the given Id
      description: List all the comments in a photo
      operationId: listComments
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        '200':
          description: Sucessfully list comments
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Comment'}
        '400':
          description: Invalid parameters supplied
        '404':
          description: Photo not found
      security:
      - bearerAuth: [] 
    post:
      tags: ["comments"]
      summary: Add a comment to a photo
      description: Add a comment to a photo given the id of the photo
      operationId: commentPhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      requestBody:
        description: Add a comment to an existing photo
        content:
          application/json:
            schema:
              type: string
              example: 'what a cool photo'
        required: true
      responses:
        '201':
          description: Sucessfully uploaded comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid parameters or request body supplied
        '404':
          description: Photo not found
      security:
      - bearerAuth: []

  /photo/{photoId}/comments/{commentId}:
    delete: 
      tags: ["comments"]
      summary: Uncomment a photo
      description: Delete a comment on a photo from the user's own photo
      operationId: uncommentPhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
        - name: commentId
          in: path
          schema:
            type: integer
            example: 10
          description: the id of the comment
          required: true
      responses:
        '204':
          description: Comment sucessfuly deleted
        '400':
          description: Invalid parameters supplied
        '404':
          description: Comment or Photo not found
      security:
      - bearerAuth: [] 
      
  /photo/{photoId}/likes:
    parameters:
      - $ref: "#/components/parameters/photoId"
    get:
      tags: ["likes"]
      summary: get a list of users who liked the photo with the id
      description: get a list of users who liked the photo with the id
      operationId: listLikes
      responses:
        '200':
          description: Successfully list photo likes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Username'
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: []
  /photo/{photoId}/likes/{username}:
    parameters:
      - $ref: "#/components/parameters/photoId"
      - $ref: "#/components/parameters/username"
    put:
      tags: ["likes"]
      summary: like the photo with the id
      description: like the photo with the id with the authenticated user
      operationId: likePhoto
      responses:
        '201':
          description: Sucessfuly liked photo
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 
    delete:
      summary: unlike the photo with the id
      description: remove the aunthenticated user's like from the photo with the id
      operationId: unlikePhoto
      responses:
        '204':
          description: Sucessfuly unliked photo
        '400':
          description: Invalid parameters supplied
        '404': 
          description: Photo not found
      security:
      - bearerAuth: [] 

components:
  schemas:
    Username:
      type: string
      example: jonhDoe
      pattern: 'ˆ.*?$'
      minLength: 3
      maxLength: 16
    UserList:
      type: object
      properties:
        nElements:
          description: number of elements of the list
          type: integer
          minimum: 0
        users:
          type: array
          minItems: 1
          items: 
            type: string
            example: jonhDoe
            pattern: 'ˆ.*?$'
            minLength: 3
            maxLength: 16
          
    UserProfile:
      type: object
      properties:
        username:
          type: string
          example: jonhDoe
        name:
          type: string
          example: Jonh Doe
        numberPosts:
          description: number of posts
          type: integer
        followers:
          description: number of followers
          type: integer
        following:
          description: number of users followed
          type: integer
        isFollowed:
          description: is the user followed by the authenticated user
          type: boolean
          default: false
        isBanned:
          description: is the user banned by the authenticated user
          type: boolean
          default: false
        photos:
          type: array
          items: {$ref: '#/components/schemas/Photo'}
    Photo:
      type: object
      properties:
        photoId:
          type: integer
          format: int 64
          example: 10
        image:
          type: string
          format: binary
          minLength: 1
          maxLength: 32505856 
        username:
          type: string
          example: jonhDoe
        nComments:
          description: number of comments on the photo
          type: integer
          format: int 64
          default: 0
        likes:
          description: number of likes on the photo
          type: integer
          format: int 64
          default: 0
        isLiked:
          description: is the photo liked by the authenticated user
          type: boolean
          default: false
        date:
          description: upload date
          type: string
          format: date-time
        caption:
          type: string
          minLength: 1
          maxLength: 90
          example: "sunny day at the beach"
    Comment:
      type: object
      properties:
        text:
          type: string
          example: 'what a cool photo'
        username:
          type: string
          example: jonhDoe
        photo:
          $ref: '#/components/schemas/Photo'
          
  parameters:
    username:
      schema:
        type: string
      name: username
      in: path
      description: 'The name that needs to be fetched.'
      required: true
      example: jonhDoe
    photoId:
      schema:
        type: integer
        example: 1
      name: photoId
      in: path
      required: true
      description: Photo Id
    
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer