openapi: 3.0.3
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moment, 
    thanks to WASAPhoto! You can upload your photos directly from your 
    PC, and they will be visible to everyone following you.
  version: 1.0.0


tags:
  - name: login
  - name: stream
  - name: photos
  - name: comments
  - name: likes
  - name: users
  - name: bans
  - name: follows
  
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'ˆ.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
  /home:
    get:
      tags: ["stream"]
      summary: authenticated user's feed
      description: see the authenticated user's feed in reverse chronological order
      operationId: getMyStream
      responses:
        '200':
          description: feed sucessfuly shown
          content:
            application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Photo' 
        '404':
          description: "no posts found"
      security:
      - bearerAuth: [] 
  /users/search:
    get:
      tags: ["users"]
      summary: search users
      description: search tab for searching other users
      parameters:
        - name: q
          in: query
          schema:
            type: string
            example: jonhDoe
          description: search query
          required: true
        - name: limit
          in: query
          schema: 
            type: integer
            default: 9
          description: limit of users to show
          required: false
      responses:
        '200':
          description: list of found users which username matches the query
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/UserList'
        '400':
          description: invalid search query
        '404':
          description: user not found
      security:
      - bearerAuth: []
    
  /user/{username}:
    get:
      tags: ["users"]
      summary: show user's profile
      description:  |
        show the user's profile, that contains:
        the user’s photos (in reverse chronological order), how many photos have 
        been uploaded, the user's username, followers and following.
      operationId: getUserProfile
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        '200':
          description: sucessfuly showing user's profile
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/UserProfile'
        '400':
          description: invalid username supplied
        '404':
          description: user not found
      security:
      - bearerAuth: []
  /user/{username}/username:
    put:
      tags: ["users"]
      summary: update username
      description: this can only be done by the logged in user.
      operationId: setMyUserName
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: username
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Username'
      responses:
        default:
          description: successful operation
      security:
      - bearerAuth: []
  /users/{username}/followers:
    parameters:
      - $ref: "#/components/parameters/username"
    post:
      tags: ["follows"]
      summary: follow a user
      description: follow the user with the username given, a user can't follow themselves
      operationId: followUser
      responses:
        '200': {description: sucessfully followed user"}
        '400': {description: invalid username supplied}
        '404': {description: user not found}
      security:
      - bearerAuth: []
  /users/{username}/followers/{followerId}:
    delete:
      tags: ["follows"]
      summary: unfollow a user
      description: unfollow the user with the searched username
      operationId: unfollowUser
      parameters:
        - $ref: "#/components/parameters/username"
        - name: followerId
          in: path
          schema:
            type: string
          description: the id of the follower
          required: true
      responses:
        '200': {description: sucessfully unfollowed user"}
        '400': {description: invalid username supplied}
        '404': {description: user not found}
      security:
      - bearerAuth: []
      
  /users/{username}/bans:
    post:
      tags: ["bans"]
      summary: ban a user
      description: ban the user with the username given, a user can't ban themself
      operationId: banUser
      parameters:
      - $ref: "#/components/parameters/username"
      responses:
        '200': {description: sucessfully banned user"}
        '400': {description: invalid username supplied}
        '404': {description: user not found}
      security:
      - bearerAuth: []
  
  /users/{username}/bans/{authUsername}:
    delete:
      tags: ["bans"]
      summary: unban a user
      description: unban the user with the username given
      operationId: unbanUser
      parameters:
        - $ref: "#/components/parameters/username"
        - name: authUsername
          in: path
          schema:
            type: string
          description: the username of the authenticated user
          required: true
      responses:
        '200': 
          description: Successfully unfollowed user
        '400': 
          description: Invalid username supplied
        '404': 
          description: User not found
      security:
      - bearerAuth: []

  /photo:
    post:
      tags: ["photos"]
      summary: upload photo
      description: upload a new photo by the authenticated user
      operationId: uploadPhoto
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  minLength: 1
                  maxLength: 32505856 
        required: true
      responses:
        '200':
          description: Photo sucessfuly uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
      security:
      - bearerAuth: []
  /photo/{photoId}:
    delete:
      tags: ["photos"]
      summary: delete photo with the given Id
      description: delete a photo that was posted by the authenticated user
      operationId: deletePhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        '200': {description: Photo sucessfuly delete}
        "404": { description: Photo not found }
      security:
      - bearerAuth: [] 
          
  /photo/{photoId}/comments:
    get:
      tags: ["comments"]
      summary: list all comments in photo with the given Id
      description: list all the comments in a photo
      operationId: getComments
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        '200':
          description: Sucessfully list comments
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/Comment'}
      security:
      - bearerAuth: [] 
    post:
      tags: ["comments"]
      summary: add a comment to a photo
      description: add a comment to a photo given the id of the photo
      operationId: commentPhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      requestBody:
        description: add a comment to an existing photo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: Sucessfully uploaded comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid ID supplied
        '404':
          description: Photo not found
      security:
      - bearerAuth: [] 
  /photo/{photoId}/comments/{commentId}:
    delete: 
      tags: ["comments"]
      summary: uncomment a photo
      description: delete a comment on a photo from the user's own photo
      operationId: uncommentPhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
        - name: commentId
          in: path
          schema:
            type: integer
            example: 10
          description: the id of the comment
          required: true
      responses:
        '200':
          description: comment sucessfuly deleted
        '400':
          description: invalid ID supplied
        '404':
          description: comment or photo not found
      security:
      - bearerAuth: [] 
      
  /photo/{photoId}/likes:
    get:
      tags: ["likes"]
      summary: get a list of users who liked the photo with the id
      description: get a list of users who liked the photo with the id
      parameters:
        - $ref: "#/components/parameters/photoId"
      
      responses:
        '200':
          description: list all the users who liked the photo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Username'
        '400':
          description: invalid ID supplied
        '404':
          description: comment or photo not found
      security:
      - bearerAuth: []
    post:
      tags: ["likes"]
      summary: like the photo with the id
      description: like the photo with the id with the authenticated user
      operationId: likePhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
      responses:
        '200':
          description: sucessfuly liked the photo
        '400':
          description: invalid ID supplied
        '404':
          description: photo not found
      security:
      - bearerAuth: [] 
  /photo/{photoId}/likes/{likeId}:
    delete:
      tags: ["likes"]
      summary: unlike the photo with the id
      description: remove the aunthenticated user's like from the photo with the id
      operationId: unlikePhoto
      parameters:
        - $ref: "#/components/parameters/photoId"
        - name: likeId
          in: path
          schema:
            type: integer
            example: 10
          description: the id of the like
          required: true
      responses:
        '200':
          description: sucessfuly unliked the photo
        '400':
          description: invalid ID supplied
        '404':
          description: photo not found
      security:
      - bearerAuth: [] 

components:
  schemas:
    Username:
      type: string
      example: jonhDoe
      pattern: 'ˆ.*?$'
      minLength: 3
      maxLength: 16
    UserList:
      type: object
      properties:
        nElements:
          description: number of elements of the list
          type: integer
          minimum: 0
        users:
          type: array
          minItems: 1
          items: 
            type: object
            properties:
              username:
                type: string
                example: jonhDoe
                pattern: 'ˆ.*?$'
                minLength: 3
                maxLength: 16
          
    UserProfile:
      type: object
      properties:
        username:
          type: string
          example: jonhDoe
        name:
          type: string
          example: Jonh Doe
        numberPosts:
          description: number of posts
          type: integer
        followers:
          description: number of followers
          type: integer
        following:
          description: number of users followed
          type: integer
        isFollowed:
          description: is the user followed by the authenticated user
          type: boolean
          default: false
        photos:
          type: array
          items: {$ref: '#/components/schemas/Photo'}
    Photo:
      type: object
      properties:
        id:
          type: integer
          format: int 64
          example: 10
        username:
          type: string
          example: jonhDoe
        nComments:
          description: number of comments on the photo
          type: integer
          format: int 64
          default: 0
        likes:
          description: number of likes on the photo
          type: integer
          format: int 64
          default: 0
        isLiked:
          description: is the photo liked by the authenticated user
          type: boolean
          default: false
        date:
          description: upload date
          type: string
          format: date-time
        image:
          type: string
          format: binary
          minLength: 1
          maxLength: 32505856 
        caption:
          type: string
          minLength: 1
          maxLength: 90
          example: "sunny day at the beach"
    Comment:
      type: object
      properties:
        text:
          type: string
          example: 'what a cool photo'
        username:
          type: string
          example: jonhDoe
        photo:
          $ref: '#/components/schemas/Photo'
          
  parameters:
    username:
      schema:
        type: string
      name: username
      in: path
      description: 'The name that needs to be fetched.'
      required: true
      example: jonhDoe
    photoId:
      schema:
        type: integer
        example: 1
      name: photoId
      in: path
      required: true
      description: Photo Id
    
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer